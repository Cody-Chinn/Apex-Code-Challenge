/**
 * Created by CodyChinn on 5/17/2023.
 * A class for creating a family of objects where
 * Object_1__c is root level
 * Object_2__c is a child of Object_1__c. There can be N amount of Object_2__c children for Object_1__c
 * Object_3__c is a child of Object_2__c. There can be N amount of Object_3__c children for Object_2__c
 * Any object can be passed into the overloaded createRelationships methods and the other 2 corresponding
 * object records will be made, meaning that 1 Object exists at each level of the family.
 *
 * Relevant Documentation: https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/langCon_apex_dml_foreign_keys.htm
 */
public with sharing class ObjectRelationshipHelper {

    // Thrown when there is an error in the DML call
    private class ObjectRelationshipHelperException extends Exception {}

    /**
     * Creates a child Object_2__c for the given root object and an Object_3__c child record
     * for the generated Object_2__c
     * @param pObject1 the root object of the family
     */
    public static void createRelationships(Object_1__c pObject1){
        // Create the child object with all data first
        String object3UID = generateUniqueId();
        Object_3__c object3 = new Object_3__c(
                Name = 'Autogenerated from Object 1 named ' + pObject1.Name,
                extId__c = object3UID
        );

        // Create a reference to the parent object that only contains an external ID
        String object2UID = generateUniqueId();
        Object_2__c object2Reference = new Object_2__c(extId__c = object2UID);
        object3.Object_2__r = object2Reference;

        // Fill in the rest of the parent Object, this is what will get passed to the DML statement
        Object_2__c object2 = new Object_2__c(
                Name = 'Autogenerated from Object 1 named ' + pObject1.Name,
                extId__c = object2UID
        );

        // Create a reference object to pObject1 that contains only the external ID
        String object1UID = generateUniqueId();
        Object_1__c object1Reference = new Object_1__c(extId__c = object1UID);
        object2.Object_1__r = object1Reference;

        // Set the parameter Object 1s external id. pObject1 will be used for the insert
        pObject1.extId__c = object1UID;

        // insert all 3 objects simultaneously
        insertObjectFamily(pObject1, object2, object3);
    }

    /**
     * Creates an Object_1__c as a parent for the given Object_2__c then creates
     * an Object_3__c as a child of the given Object_2__c
     * @param pObject2 the Object_2__c record that needs 1 parent and 1 child created
     */
    public static void createRelationships(Object_2__c pObject2){
        // Fill in the missing data for the parameter Object 2
        String object2UID = generateUniqueId();
        pObject2.extId__c = object2UID;
        // Create the reference only object 2 containing only the external ID
        // to use as a link for object 3
        Object_2__c object2Reference = new Object_2__c(extId__c = object2UID);

        // Create the child object and populate all fields
        String object3UID = generateUniqueId();
        Object_3__c object3 = new Object_3__c(
                Name = 'Auto generated from Object 2 named ' + pObject2.Name,
                extId__c = object3UID,
                Object_2__r = object2Reference
        );

        // Create the reference only Object 1 containing only the external ID
        // to use as a link for the parameter object 2
        String object1UID = generateUniqueId();
        Object_1__c object1Reference = new Object_1__c(extId__c = object1UID);
        pObject2.Object_1__r = object1Reference;

        // Create Object 1 with all data populated
        Object_1__c object1 = new Object_1__c(
                Name = 'Autogenerated from Object 2 named ' + pObject2.Name,
                extId__c = object1UID
        );

        // insert all objects simultaneously
        insertObjectFamily(object1, pObject2, object3);
    }

    /**
     * Creates an Object_2__c for the given parent record then creates an Object_1__c record as
     * a parent for the newly created Object_2__c record
     * @param pObject3 The record that needs a parent record and grandparent record created
     */
    public static void createRelationships(Object_3__c pObject3){
        // Fill in the external id field for parameter Object 3
        String object3UID = generateUniqueId();
        pObject3.extId__c = object3UID;

        // Create the parent object 2 reference to link to parameter Object 3
        String object2UID = generateUniqueId();
        Object_2__c object2Reference = new Object_2__c(extId__c = object2UID);
        pObject3.Object_2__r = object2Reference;

        // Create the actual object 2 parent to be inserted with all fields populated
        Object_2__c object2 = new Object_2__c(
                Name = 'Autogenerated from Object 3 named ' + pObject3.Name,
                extId__c = object2UID
        );

        // Create the parent Object 1 reference to link to Object 2
        String object1UID = generateUniqueId();
        Object_1__c object1Reference = new Object_1__c(extId__c = object1UID);
        object2.Object_1__r = object1Reference;

        // Create the actual object 1 to be inserted with all fields populated
        Object_1__c object1 = new Object_1__c(
                Name = 'Autogenerated from Object 3 Named ' + pObject3.Name,
                extId__c = object1UID
        );

        // insert all objects simultaneously
        insertObjectFamily(object1, object2, pObject3);
    }

    /**
     * Saves all objects passed in simultaneously, then checks that all saves were successful
     * @param object1 root object of family tree, parent of Object_2__c
     * @param object2 child Object of Object_1, parent of Object_3__c
     * @param object3 child Object of Object_2, grandchild of Object_1__c
     */
    private static void insertObjectFamily(Object_1__c object1, Object_2__c object2, Object_3__c object3){
        Database.SaveResult[] objectRecordResults = Database.insert(new SObject[] { object1, object2, object3 });
        for(Integer i = 0; i < objectRecordResults.size(); i++){
            if(!objectRecordResults[i].isSuccess()){
                // This is the only line that isn't covered in unit testing. I'd keep this here for production code and
                // make some DML mock classes to get this to fail, but I thought that was out of scope for this code test
                throw new ObjectRelationshipHelperException('Found a record that was not successfully inserted. ' + objectRecordResults[i].getErrors().toString());
            }
        }
    }

    /**
     * Generates a Unique ID that can be used as an external ID in the Object family, which allows
     * all objects to be linked together with one DML call
     * @return A unique ID string
     */
    private static String generateUniqueId(){
        // If you're not first, you're last
        Blob rickyBlobby = Crypto.generateAesKey(192);
        return EncodingUtil.convertToHex(rickyBlobby);
    }
}